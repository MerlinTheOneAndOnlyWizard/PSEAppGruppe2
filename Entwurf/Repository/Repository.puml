@startuml

skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle


package Repository {
    package ModelSchnittstelle {
      class ProjectHelper <<singleton>> {
        +getProject(Integer): Project
        +getProjects(): Collection<Project>
        +createProject(): Project
      }

      interface Table <<interface>> {
        +getRow(Integer): Row
        +getColumn(Integer): Collection<Any>
        +getCell(Integer, Integer): Any
        +insertRow(Row) throws IllegalTypeException
        +getLayout(): Collection<Class<Any>>
        +addColumn(Class<Any>)
        +deleteColumn(Integer)
        'This is something I am not sure about. How do our InputElements look like?
        +getUIElement(Integer): Function(Any)
        +setUIElement(Integer, Function(Any))
      }

      interface Row <<Interface>> {
        +getCell(Integer): Any
        +getMetaData(Integer): RowMetaInformation
      }

      interface Project <<interface>> {
        +getProjectSkeleton(): ProjectSkeleton
        +getTable(): Table
        +getAdmin(): User
        +getUsers(): Collection<Users>
        +setName(String)
        +setDescription(String)
        +setWallpaper(path: String)
        +setThumbnail(path: String)
      }

      interface ProjectSkeleton <<interface>> {
        +getID(): Integer
        +getName(): String
        +getDescription(): String
        +getWallpaper(): Drawable
        +getThumbnail(): Drawable
        +getGraphs(): Collection<Graph>
        +getProjectSettings(): Settings
        +getNotifications(): Collection<Notification>
      }

      interface Graph <<interface>> {
        'Does this always recompute the DataSets? If not how does it decide when to recompute?
        +getDataSets(): Collection<Collection<Any>>
        +getCustomizing(): Settings
        +getImage(): Drawable?
        +setCalculationFunction(DataTransformation)
      }

      interface Settings <<interface>> {
        +getSetting(String): Any throws SettingNotFoundException
        +setSetting(String, Any) throws SettingNotFoundException
      }

      interface Notification <<interface>> {
        +getMessage(): String
        +sendNow(vararg Any): Boolean throws IllegalContextException
      }

      'This is kind of the same as a project without Data. However, a project really isn't
      'a subtype of ProjectTemplate. How do we want to do this? Do we know any Patterns that
      'fit this problem?
      interface ProjectTemplate <<interface>> {
        +getProjectSkeleton(): ProjectSkeleton
        +getTableLayout(): Collection<Class<Any>>
      }

      interface GraphTemplate <<interface>> {
        +getName(): String
        +getDescription(): String
        +getThumbnail(): Drawable
        +getCustomizing(): Settings

      }

      interface Post <<interface>> {
        +getContent(): Content
        +getName(): String
        +getDescription(): String
      }

      interface Content <<interface>> {

      }
'-von Anton definiert------------------------------------------------------------------------------'
      class TemplateHelper <<singleton>> {
                  +getProjectTemplates(): Collection<ProjectTemplate>
                  +getGraphTemplates(): Collection<GraphTemplate>
                }
    }
'=================================================================================================='
  package SanityCheck {

  }
'=================================================================================================='
  package UpToDater {
        'Wenn ich einmal länger als 72h am Stück offline war merke ich mir diese Intervalle
        'dann Frage ich jemanden auf dem Server an, der in diesen 72h keine Blindspots hat
        class OldDataFetcher {
        +from: DateTime
        +to: DateTime
        +from: Project
        'null == daten nicht vorhanden
        +getOldData(): List<OldData>?
        }
  }
'=================================================================================================='
package RemoteDataSourceSchnittstelle {
    class CommandBuffer <<sigleton>> {
    -incoming: List<Command>
    -outgoing: List<Command>

    +appendIncoming(List<Command>): void
    +appendOutgoing(List<Command>): void
    +collectIncoming(): List<Command>
    +collectOutgoing(): List<Command>
    }
    class RemoteDataSourceSchnittstelle <<sigleton>> {

    'Gibt an ob zum Zeitpukt des Methodenaufrufs eine Serververbindung aufgabaut werden konnte
    +checkServerConnection(): Boolean
    +getPosts(): List<Post>
    'gibt alle aktuellen Deltas der Projekte an denen Nutzender teilnimmt
    +getCurrentDeltas(): List<Command>
    'Fragt Deltas von einem Online Project an, die in einem bestimmten Zeitraum erstellt wurden
    +requestOldDeltas(OnlineProjectID:String, from:UnixTime, to:UnixTime): List<Command>
    }
    class PostWrapper {
        -image: Drawable
        }
    }
'=================================================================================================='
 package Commands {
 enum UserRole <<enumeration>> {
         ADMIN
         CASUAL
     }
 enum ProjectCommand <<enumeration>> {
    DELETE_ROW
    DELETE_COLUMN
    ADD_ROW
    ADD_COLUMN
    SET_CELL_IN_ROW
    +execute(ProjectCommandData) throws IllegalOperationException, JsonSyntaxException
 }
 class ProjectCommandData <<data class>> {
    +commandType: ProjectCommand
    +projectID: ProjectID
    +OnlineProjectID: OnlineProjectID?
    {field}+wentOnline: int '(UnixTime)?
    {field}+serverRemoveTime: int '(UnixDuration)?
    +commandByUser: String?
    +isProjectAdmin: boolean?
    +commandTypeDataJson: Json
 }
 class CommandTypeData <<data class>> {
 }
 class TableCommandData <<data class>> {
    +indices: List<int>
    +content: List<Any>
 }
 class GraphCommandData <<data class>> {

 }
 class UserCommandData <<data class>> {

 }
 class SettingCommandData <<data class>> {

 }
 class CommandUtility <<static>> {
    +{static} setServerInfo(ProjectCommandData, serverInfo: ServerInfo):ProjectCommandData
    +{static} toJson(ProjectCommandData): Json
    +{static} constructFromJson(Json): ProjectCommandData throws JsonSyntaxException
 }
 class IllegalOperationException {
     }
 CommandUtility ..> Gson : <<uses>>
 ProjectCommandData ..> ProjectCommand : <<uses>>
 ProjectCommand ..> IllegalOperationException : <<throws>>

 CommandTypeData <|-- TableCommandData
 CommandTypeData <|-- GraphCommandData
 CommandTypeData <|-- SettingCommandData
 CommandTypeData <|-- UserCommandData
 }
'=================================================================================================='
  package CommandCenter {
    class CommandInbox {
        -commandQueue: List<Command>
    }
    class OldCommandConverter {
    +{static} toNewCommand(Command): Command
    }
  }

}
package Gson {}

@enduml