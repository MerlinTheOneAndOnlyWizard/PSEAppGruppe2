skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle

package Queues{

package ProjectCommandQueue {

class ProjectCommandQueue {
    - List<JSON> projectCommands;
    - List<ProjectCommandQueueObserver> projectCommandQueueObserver;
    ..QueueLogic..
    + GetProjectCommand(): JSON
    + AddProjectCommand(JSON): void
    ..ObserverLogic..
    + registerObserver(ProjectCommandQueueObserver)
    + unregisterObserver(ProjectCommandQueueObserver)
    - notifyObservers()
}

class ProjectCommandQueueObserver <<interface>><<observer>>{
    + update()
}


ProjectCommandQueue "1" *-up- "1" ProjectCommandQueueObserver
}




package FetchRequestQueue {
' Store the fetchRequests for the ProjectCommands
class FetchRequestQueue {
    - fetchRequests: List<JSON>
    - observer: List<FetchRequestQueueObserver>;
    ..QueueLogic..
    + GetFetchRequest(): ProjectCommandInfo
    + AddFetchRequest(ProjectCommandInfo): void
    ..ObserverLogic..
    + registerObserver(FetchRequestsQueueObserver)
    + unregisterObserver(FetchRequestsQueueObserver)
    - notifyObservers()
}

class FetchRequestsQueueObserver <<interface>><<observer>>{
    + update()
}


FetchRequestQueue "1" *-up- "1" FetchRequestsQueueObserver 

}




}

class ProjectCommandInfo <<dataclass>> {
    - wentOnline : int 
    - serverRemoveTime: int
    - commandByUser: String
    - IsProjectAdmin: Boolean

    - ProjectCommand: JSON
    getWentOnline(): int
    getServerRemoveTime(): int
    getCommandByUser(): String
    getIsProjectAdmin(): int
    getProjectCommand(): JSON
}
