@startuml

skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
hide circle


class TableRow {
  row: Integer
  col: Integer
}

abstract class AppDataBase {
  ..Entities..
  IntegerRow
  TimeRow
  ..TypeConverters..
  RoomDateTimeConversion
}

package Entities {
  '@Entity(primaryKeys=["row", "col"])
  class IntegerRow {
    value: Integer
  }
  
  '@Entity(primaryKeys=["row", "col"])
  class DateTimeRow {
    value: DateTime
  }
  
  '@Entity
  class ProjectCustomizing {
    'PrimaryKey
    id: Integer 
    name: String
    'Embedded
    customzing: ProjectCustomizing 
  }
  
  '@Entity
  class Graph {
    'PrimaryKey
    id: Integer 
    templateId: Integer
    projectId: Integer
    'Embedded
    map: TableGraphTransformation
    picturePath: String
  }
  
  '@Entity
  class GraphTemplate {
    id: Integer
    name: String
    createdBy: String
    'Embedded
    customizing: GraphCustomizing 
  }
  
  '@Entity
  class Settings {
    ???
  }
}

package DAOs {
  interface IntegerDAO {
    --
    insertAll(vararg integers: IntegerRow): Unit
    getAll(): List<IntegerRow>
    getByRow(row: Integer): List<IntegerRow>
    delete(integer: IntegerRow): Unit
  }
  
  interface DateTimeDAO {
    --
    insertAll(vararg times: DateTimeRow): Unit
    getAll(): List<DateTimeRow>
    getByRow(row: Integer): List<DateTimeRow>
    delete(integer: DateTimeRow): Unit
  }
}

package TypeConverters {
  class RoomDateTimeConversion {
    --
    DateTimeToLong(DateTime): Long
    LongToDateTime(Long): DateTime
  }
  
  class BooleanConversion {
    --
    BooleanToInt(Boolean): Integer
    IntToBoolean(Integer): Boolean
  }
}

class TableAccess {
  --
  getRow(row: Integer)
}

TableAccess - IntegerDAO
TableAccess - DateTimeDAO

TableRow <|-- IntegerRow
TableRow <|-- DateTimeRow
RoomDatabase <|-- AppDataBase

AppDataBase -[hidden]-> TableAccess
DAOs -[hidden]> TypeConverters
TableAccess -[hidden]-> DAOs


@enduml