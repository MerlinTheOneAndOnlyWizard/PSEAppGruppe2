@startuml

skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle


class TableValue {
  row: Integer
  col: Integer
  projectID: Integer
}

abstract class AppDataBase {
  ..Entities..
  IntegerValue
  TimeValue
  ..TypeConverters..
  RoomDateTimeConversion
}

package Entities {
  '@Entity(primaryKeys=["row", "col"])
  class IntegerValue {
    value: Integer
  }
  
  '@Entity(primaryKeys=["row", "col"])
  class DateTimeValue {
    value: DateTime
  }
  
  '@Entity
  class RowProperties {
    'PrimaryKey
    rowID
    createdOn: DateTime
    createdBy: String
  }
  
  '@Entity
  class ProjectCustomizing {
    'PrimaryKey
    id: Integer 
    name: String
    'Embedded
    customzing: ProjectCustomizing 
  }
  
  '@Entity
  class GraphEntity {
    'PrimaryKey
    id: Integer 
    templateId: Integer
    projectId: Integer
    'Embedded
    map: TableGraphTransformation
    picturePath: String
  }
  
  '@Entity
  class GraphTemplate {
    id: Integer
    name: String
    createdBy: String
    'Embedded
    customizing: GraphCustomizing 
  }
  
  '@Entity(primaryKey=["id", "col"])
  class TableLayoutColumn {
    id: Integer
    col: Integer
    type: String
  }
  
  '@Entity
  class ProjectEntity {
    'PrimaryKey
    id: Integer
    tableID: Integer
    tableLayoutID: Integer
  }
  
  '@Entity
  class Settings {
    ???
  }
  
  '@Entity
  class ProjectTemplate {
    name: String
    description: String
    tableLayoutID: Integer
    wallpaperPath: String
  }
}

package DAOs {
  interface IntegerDAO {
    insertAll(vararg integers: IntegerRow): Unit
    getAll(): List<IntegerRow>
    getByRow(row: Integer): List<IntegerRow>
    delete(integer: IntegerRow): Unit
  }
  
  interface DateTimeDAO {
    insertAll(vararg times: DateTimeRow): Unit
    getAll(): List<DateTimeRow>
    getByRow(row: Integer): List<DateTimeRow>
    delete(integer: DateTimeRow): Unit
  }
}

package TypeConverters {
  class RoomDateTimeConversion {
    DateTimeToLong(DateTime): Long
    LongToDateTime(Long): DateTime
  }
  
  class BooleanConversion {
    BooleanToInt(Boolean): Integer
    IntToBoolean(Integer): Boolean
  }
}

class TableAccess {
  getRow(row: Integer)
}

class Project {
  - name: String
  - description: String
  ~ Constructor(ProjectTemplate) : Project
  ~ setName(String)
}
Project - "0..1" Wallpaper : has >
Project -- "0..n" Notification : has >
Project "1" - "1" Table : has data of <
Project "1" -- "0..n" Graph


class Wallpaper {
  name: String
  path: String
  'Some kind of method to read the specified file and return the image or whatever is needed for the UI
}

class Notification {
  
}

class DataType<T> {
  
}

class Table {
  getRow(Integer) : Collection<DataType>
}
'Das sollten wahrscheinlich undbounded Arrays werden
Table -- "1..n" ProjectTableColumnProperties
Table - "0..m" ProjectTableRow

class ProjectTableRow {
  
}
ProjectTableRow - "1..n" ProjectEntry

class ProjectEntry<T> {
  value: T
}

class ProjectTableColumnProperties {
  - id: Integer
  - name: String
  - unit: String
  - uiElement: () -> Unit
}

class Graph {
  
}
Graph -- GraphCustomizing : has >
Graph - GraphData : is generated from >
(Graph, GraphData) .. TableGraphTransformation : by applying

class GraphData {
  
}
GraphData o-- "1..n" DataSeries

class DataSeries {
  
}

class GraphCustomizing {
  
}

class TableGraphTransformation {
  
}



TableAccess - IntegerDAO
TableAccess - DateTimeDAO

TableValue <|-- IntegerValue
TableValue <|-- DateTimeValue
RoomDatabase <|-- AppDataBase

AppDataBase -[hidden]-> TableAccess
DAOs -[hidden]> TypeConverters
TableAccess -[hidden]-> DAOs
Table -[hidden]-> Wallpaper
GraphCustomizing -[hidden]-> TableValue


@enduml