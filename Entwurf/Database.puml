@startuml

skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle


abstract class AppDataBase {
    ..Entities..
    IntegerValue
    TimeValue
    ..TypeConverters..
    DateTimeConversion
    UserConversion
}

package Entities {
    '@Entity(primaryKeys=["tableId", "createdOn", "createdBy"])
    class RowEntity {
        projectId: Integer
        createdOn: DateTime
        createdBy: User
        values: String
    }

    '@Entity
    class ProjectEntity {
        'PrimaryKey
        id: Integer
        '@Embedded
        skeleton: ProjectSkeletonEntity
        admin: User
    }
    ProjectEntity - ProjectSkeletonEntity

    '@Entity
    class ProjectTemplateEntity {
        id: Integer
        '@Embedded
        skeleton: ProjectSkeletonEntity
    }
    ProjectSkeletonEntity -- ProjectTemplateEntity

    '@Entity
    class ProjectCustomizingEntity {
        'PrimaryKey
        id: Integer
        name: String
        'Embedded
        customizing: ProjectCustomizing
    }
  
    '@Entity
    class GraphEntity {
        '@PrimaryKey
        id: Integer
        projectId: Integer
        'Embedded
        map: TableGraphTransformation
        path: String
    }
  
    '@Entity
    class GraphTemplate {
        '@PrimaryKey
        id: Integer
        graphId: Integer
        name: String
        createdBy: String
    }

    '@Entity(primaryKey=["settingsId", "name"])
    class ProjectSettingEntity {
        projectId: Integer
        name: String
        value: String
    }

    '@Entity(primaryKey=["settingsId", "name"])
    class GraphSettingEntity {
        graphId: Integer
        name: String
        value: String
    }

    '@Entity(primaryKey=["projectId", "user"])
    class ProjectUserMap {
        projectId: Integer
        user: User
    }

    '@Entity(primaryKey=["projectId", "id"])
    class UIElementMap {
        projectId: Integer
        id: Integer
        type: String
    }
  
    class ProjectSkeletonEntity {
        name: String
        description: String
        wallpaper: String
        layout: String
    }

    note right of ProjectSkeletonEntity::layout
        contains both the type of the
        column as well as the ids of
        the UI Elements used for the
        column
    end note
}

class ProjectData {
    id: Integer
    name: String
    description: String
    wallpaper: String
}

package DAOs {
    abstract class TableContentDAO <<abstract>> {
        +getRowsByIds(vararg ids: Integer): Flow<Row>
        +insertRow(row: Row, projectId: Integer, before: Integer)
        +deleteRows(vararg row: Row, projectId: Integer)
        '@Insert
        -insertRowEntity(row: RowEntity)
        '@Query("SELECT * FROM row WHERE projectId IN (:ids)")
        -getRowEntitiesByIds(vararg ids: Integer): Flow<RowEntity>
        '@Delete
        -deleteRows(vararg rows: RowEntity)
    }

    abstract class ProjectDataDAO <<abstract>> {
        '@Query("SELECT id, name, description, wallpaper FROM project")
        +getAllProjectData(): Flow<List<ProjectData>>
        '@Query("SELECT id, name, description, wallpaper
        '        FROM   project
        '        WHERE  id IN (:ids)")
        +getProjectDataByIds(vararg ids: Integer): Flow<List<ProjectData>>
        '@Query("SELECT * FROM user WHERE projectId IN (:ids)")
        +getUsersByIds(vararg ids: Integer): Flow<List<ProjectUserMap>>
        +addUser(projectId: Integer, user User)
        +removeUsers(projectId: Integer, vararg users: User)
        '@Query("SELECT id AS projectId, admin AS user FROM project WHERE id IN (:ids)")
        +getAdminByIds(vararg ids: Integer): Flow<List<ProjectUserMap>>
        '@Query("UPDATE project SET admin = :admin WHERE id = :projectId")
        +changeAdmin(projectId: Integer, admin: User)
        '@Insert
        -addProjectUserMap(userMap: ProjectUserMap)
        '@Delete
        -removeProjectUserMap(vararg userMaps: ProjectUserMap)
    }

    abstract class SettingsDAO <<abstract>> {
        +getProjectSettings(projectId: Integer): Flow<List<Setting>>
        +getGraphSettings(graphId: Integer): Flow<List<Setting>>
        +changeProjectSetting(projectId: Integer, setting: Setting)
        +changeGraphSetting(graphId: Integer, setting: Setting)
        +createProjectSetting(projectId: Integer, setting: Setting)
        +createGraphSetting(graphId: Integer, setting: Setting)
        '@Query("SELECT name, value FROM projectSetting WHERE projectId = :projectId")
        -getProjectSettingsEntity(projectId: Integer): Flow<List<ProjectSettingEntity>>
        '@Query("SELECT name, value FROM graphSetting WHERE graphId = :graphId")
        -getGraphSettingsEntity(graphId: Integer): Flow<List<GraphSettingEntity>>
        '@Update
        -changeProjectSettingEntity(setting: ProjectSettingEntity)
        '@Update
        -changeGraphSettingEntity(setting: GraphSettingEntity)
        '@Insert
        -createProjectSettingEntity(setting: ProjectSettingEntity)
        '@Insert
        -createGraphSettingEntity(setting: GraphSettingEntity)
    }

    abstract class LayoutDAO <<abstract>> {
        +getLayoutByIds(vararg ids: Integer): Flow<List<TableLayout>>
        +addColumn(projectId: Integer, type: Class<Any>, before: Integer)
        +deleteColumn(projectId: Integer, columnId: Integer)
        '@Query("UPDATE project SET layout = :layout WHERE id = :projectId")
        -changeLayout(projectId: Integer, layout: String)
        '@Query("SELECT layout FROM project WHERE id IN (:ids)")
        -getLayouts(vararg ids: Integer): Flow<List<String>>
        '@Query("SELECT layout FROM project WHERE id = :id")
        -getLayout(id: Integer): String
    }

    abstract class GraphDAO <<abstract>> {

    }

    abstract class UIElementDAO <<abstract>> {
        +getUIElements(vararg ids: Integer): Flow<List<UIElementMap>>
        +removeUIElement(projectId: Integer, column
    }
}

package TypeConverters {
    class DateTimeConversion {
        DateTimeToLong(DateTime): Long
        LongToDateTime(Long): DateTime
    }

    class UserConversion {
        UserToString(User): String
        StringToUser(String: User
    }

    class UIElementTypeConversion {
        UIElementToString(UIElementType): String
        StringToUIElement(String): UIElementType
    }

    class TransformationConversion {
        TraFoToString(Project::DataTransformation): String
        StringToTraFo(String): Project::DataTransformation
    }
}

note bottom of UserConversion
    might want to save users as
    json (UserId, name, dont know
    what else?)
end note

class TableAccess {
  getRow(row: Integer)
}

class Project {
  - name: String
  - description: String
  ~ Constructor(ProjectTemplate) : Project
  ~ setName(String)
}
Project - "0..1" Wallpaper : has >
Project -- "0..n" Notification : has >
Project "1" - "1" Table : has data of <
Project "1" -- "0..n" Graph


class Wallpaper {
  name: String
  path: String
  'Some kind of method to read the specified file and return the image or whatever is needed for the UI
}

class Notification {
  
}

class Table {
  getRow(Integer) : Collection<DataType>
}
'Das sollten wahrscheinlich unbounded Arrays werden
Table -- "1..n" ProjectTableColumnProperties
Table - "0..m" ProjectTableRow

class ProjectTableRow {
  
}
ProjectTableRow - "1..n" ProjectEntry

class ProjectEntry<T> {
  value: T
}

class ProjectTableColumnProperties {
  - id: Integer
  - name: String
  - unit: String
  - uiElement: () -> Unit
}

class Graph {
  
}
Graph -- GraphCustomizing : has >
Graph - GraphData : is generated from >
(Graph, GraphData) .. TableGraphTransformation : by applying

class GraphData {
  
}
GraphData o-- "1..n" DataSeries

class DataSeries {
  
}

class GraphCustomizing {
  
}

class TableGraphTransformation {
  
}

RoomDatabase <|-- AppDataBase

AppDataBase -[hidden]-> TableAccess
Table -[hidden]-> Wallpaper
GraphCustomizing -[hidden]-> TypeConverters
TypeConverters -[hidden]-> RoomDatabase
SettingsDAO -[hidden]-> RowEntity
LayoutDAO -[hidden]-> SettingsDAO
SettingsDAO -[hidden]> TableContentDAO
ProjectDataDAO -[hidden]> UIElementDAO



@enduml