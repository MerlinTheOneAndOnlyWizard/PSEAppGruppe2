@startuml

skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle

package server
{
interface RequestToServer<<interface>>{
  
  +saveDelta(project: int, delta: String, user: String) /' don't know the Type of Token nor String '/
  +getLatestDelta(lastDataIdentifier: String, user: String): JSON
  +addUser(project: int, user: String): String
   +removeUser(project: int, delta: String, removedUser: String, admin: String): void
   +getOldData(lastDataIdentifier: String, project: int, user: String ): JSON /' i'm not sure if its enough'/
    
    
    +showPosts(user: String): List of png /'probably Png'/
    +displayPost(postID: int, user: String): List of png /'probably Png'/
    +downloadTemplate(templateID: int, String): JSON /' i'm not sure, if we have something like a templateID, or we need a postID and a templateID'/
    
  }

note right of RequestToServer
  First request for using the server, triggered by an action from the user.
    end note




abstract class Command <<abstract>>{
 execute()
}
 
  class accessToServer <<Singleton>>{
   buildCommand(String): Command
    
  }

package OnlineDatabase{
 class Delta <<Entity>>{
    {primaryKey}: AddedToServer:Date
    {primaryKey}: User: String
    delta:JSON
    downloadedBy: Int
    project: int
 }
class deltaController() {
- repo: DeltaRepository
+ getLatestDelta(primaryKey: Tupel(Date,String), project: int): Tupel(Collection<Delta>,latestDelta: Tupel(Date, String))
+ saveDelta(project: int, delta: String, user: String)
+ getOldData(PrimaryKey(Data, String), user: String, project: int)
}
interface DeltaRepository{}

class ProjectParticipants <<Entity>>{
{primaryKey} user: String
{primaryKey} project: int
role: Role
}

class ProjectParticipantsController{
- repo: ProjectParticipantsRepository
+ participates(user: String, project: int): boolean
+ isAdmin(user: String, project: int): boolean
+ addUser(user: String, project: int):boolean
+ removeUser(user: String, project: int): boolean
+ getAmountOfPartition(project: int): int
}
interface ProjectParticipantsRepository{}

enum Role{
Participant
Admin
}
}
package PostDatabase{
'/Things for access to post things/'
}

  }





@enduml