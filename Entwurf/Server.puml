@startuml

skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle


package Spring{
class HandlerInterceptorAdaper{}
class WebMvcConfigurerAdapeter{}

}
package server
{
    GeneralConfig "n" -- "1" LoginIntercepter


/'interface RequestToServer<<interface>>{

  +saveDelta(project: int, delta: String, user: String) /' don't know the Type of Token nor String
  +getLatestDelta(lastDataIdentifier: String, user: String): JSON
  +addUser(project: int, user: String): String
   +removeUser(project: int, delta: String, removedUser: String, admin: String): void
   +getOldData(lastDataIdentifier: String, project: int, user: String ): JSON /' i'm not sure if its enough


    +showPosts(user: String): List of png /'probably Png
    +displayPost(postID: int, user: String): List of png /'probably Png
    +downloadTemplate(templateID: int, String): JSON /' i'm not sure, if we have something like a templateID, or we need a postID and a templateID

  }

note right of RequestToServer
  First request for using the server, triggered by an action from the user.
    end note


'/


    class ServerApplication <<SpringBootApplication>>{
        main(this:ServerApplication,args:String[])
    }
    class GeneralConfig extends WebMvcConfigurerAdapeter{
        getInterceptor():LoginIntercepter
        addInterceptor()
    }
    class LoginIntercepter extends HandlerInterceptorAdaper{
        preHandle():boolean /'Wie auch immer der Login stattfindet'/
    }
package OnlineDatabase{
    DeltaController - DeltaRepository : repo <
    OldDataController - OldDataRepository : repo <
    ProjectParticipants ..> Role : use
    OldData ..> Tupel : use
    ProjectParticipantsController - ProjectParticipantsRepository : repo <

    class OldData<<Entity>>{
        {primaryKey} requestID: int
         user: String
         {field}keyForData:Tupel(Date, String)
        project: int
        canGet: int
    }
    class OldDataController{
        - repo: OldDataRepository
        + add(user: String, keyForData: Tupel(Date, String), project: int):requestID
        + IsDataAvailable(requestID): boolean
        +removeRequest(requestID)
    }

    interface OldDataRepository{}

    class Delta <<Entity>> {
        {primaryKey}: AddedToServer:Date
        {primaryKey}: User: String
        delta:JSON
        downloadedBy: Int
        project: int
        requestedBy: String
    }
    class DeltaController {
        - repo: DeltaRepository
        + getLatestDelta(primaryKey: Tupel(Date,String), project: int): Tupel(Collection<Delta>,latestDelta: Tupel(Date, String))
        + saveDelta(project: int, delta: String, user: String)
        + getOldData(PrimaryKey(Data, String), requestID: int, project: int) :Tupel(Collection<Delta>,latestDelta: Tupel(Date, String))
    }
    interface DeltaRepository < Delta, Tupel(Date, String)>{
    deleteOldData()
    deleteDownloadedData()
    }
    interface ProjectParticipantsRepository <ProjectParticipants,Tupel(String, int)>{
         participates(user: String, project: int): boolean
         isAdmin(user: String, project: int): boolean
         getAmountOfPartition(project: int): int
    }
    class ProjectParticipantsController{
         addUser(user: String, project: int):boolean
         removeUser(user: String, project: int): boolean
    }
    class ProjectParticipants <<Entity>>{
        {primaryKey} user: String
        {primaryKey} project: int
        role: Role
    }
    enum Role{
        Participant
        Admin
    }
}
package PostDatabase{
    PostDatabase - PostsRepository
    Graphtemplate - GraphtemplatesRepository
    PostsController - PostsRepository : repo <
    GraphtemplatesController - GraphtemplatesRepository : repo <

    class Posts <<Entity>>{
        {primaryKey} PostID: int
        PostPreview: PNG
        PostDetail: PNG
        CreatedBy: String
        projectTemplate: JSON
    }
    interface PostsRepository <PostDatabase,int>{}

    class PostsController{
        - repo: PostsRepository
        + getAllPostPreview():Collection(PNG)
        + getPostDetail(fromPost: int)
        + getProjectTemplate(fromPost: int): JSON
        + addPost(postPreview: PNG, postDetail: PNG, user: String, projectTemplate: JSON, graphTemplate: List(JSON))
        + removePost(postID, user: String)
    }

    class Graphtemplate <<Entity>>{
        {primaryKey} PostID: int
        {primaryKey} TemplateNumber: int
        Template: JSON
    }
    interface GraphtemplatesRepository<Graphtemplate, Tupel(int,int)>{}

    class GraphtemplatesController {
        -repo: GraphtemplatesRepository
        +removePost(postID: int)
        + addOne(template: JSON, postID: int)
        + addPost(templates: List(JSON), postID: int)
        + getTemplate(postID: int, TemplateNumber: int):JSON
    }
  }
  class Tupel <T,U> {
      - first: T
      - second: U
  }
}




@enduml