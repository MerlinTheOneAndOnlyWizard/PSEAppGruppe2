@startuml

skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle

package server
{
interface RequestToServer<<interface>>{
  
  +saveDelta(project: int, delta: String, user: UserID) /' don't know the Type of Token nor UserID '/
  +getLatestDelta(lastDataIdentifier: String, user: UserID): WorkTorken
  +addUser(project: int, user: UserID): WorkToken
   +removeUser(project: int, delta: String, removedUser: UserID, admin: UserID): WorkToken
   +getOldData(lastDataIdentifier: String, project: int, user: UserID ):WorkToken /' i'm not sure if its enough'/
    
    
    +showPosts(user: UserID): WorkToken
    +displayPost(postID: int, user: UserID): WorkToken
    +downloadTemplate(templateID: int, userID):WorkToken /' i'm not sure, if we have something like a templateID, or we need a postID and a templateID'/
    
  }

note left of RequestToServer
  First request for using the server, triggered by an action from the user.
    end note
note right of RequestToServer /'To be removed'/
      please read the inline commentary
    end note
  
  interface StatusRequest <<interface>>>{
    +isFinished(workToken):Token
    +getResult(finishToken):String
}
note right of StatusRequest
      Requests to get the result o,f an request
    end note


abstract class Command <<abstract>>{
 execute()
}
 
  class accessToServer <<Singleton>>{
   buildCommand(String): Command
    
  }
  
 
  
  ' not sure if this is a good idea, to be replaced by a Database
  class project{ 
    - user: UserID[]
    - admin: int
    - delta: Database
    }
  
  
  
  
  }
@enduml