@startuml

skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle

package OnlineDatabase{


    DeltaController -- DeltaRepository : repo <
    OldDataController -- OldDataRepository : repo <
    ProjectParticipants ..> Role : use
    AccessToProjectInterceptor ..> ProjectParticipantsRepository
    /'OldData ..> Tupel : use'/
    ProjectParticipantsController -- ProjectParticipantsRepository : repo <



    class AccessToProjectInterceptor{
        preHandle(): boolean

    }

    note right of AccessToProjectInterceptor::preHandle
        used before any call in OnlineDatabase
         except addUser at ProjectParticipantsController
         and removeTime in DeltaController
    end note



    class OldData<<Entity>>{
        {primaryKey}: ID: String
        user: String
        project: long
        requestInfo: String
    }
    class OldDataController{
        + demandOldData(user: String, project: long, requestInfo: String)
        + needOldData(user: String, project: long):Collection(<OldData>)
    }

    interface OldDataRepository<OldData, String>{
     hasOldData(project:long, user: String)
     getDemand(project:long): Collection<OldData>
    }

    class Delta <<Entity>> {
        {primaryKey}: AddedToServer: Date
        {primaryKey}: User: String
        delta: JSON
        downloadedBy: String[23]
        project: long
        requestedBy: String
        isAdmin: boolean
    }
    class DeltaController{
        + saveDelta(project: long, delta: String, user: String)
        + getDelta(project: long, user: String):Collection(<Delta>)
        + provideOldData(delta: String, forUser: String, initialAdded: Date, initialAddedBy: String, project: int, wasAdmin: boolean)
        + removeTime():Date
    }

    interface DeltaRepository <Delta, Tupel(Date, String)> extends JpaRepository{
    - removeTime: Date
    deleteOldData()
    deleteDownloadedData()
    getRemoveTime()
    }


    interface ProjectParticipantsRepository <ProjectParticipants,Tupel(String, int)> extends JpaRepository{
         participates(user: String, project: long): boolean
         isAdmin(user: String, project: long): boolean
         getAmountOfPartition(project: long): int
         newAdmin(project: long): String
    }

    class ProjectParticipantsController{
        - projectID: long
         + addUser(user: String, project: long):boolean
         + removeUser(userToRemove: String, project: long, user: String): boolean


         + addProject(user:String): long
    }
    class ProjectParticipants <<Entity>>{
        {primaryKey} user: String
        {primaryKey} project: long
        role: Role
        NumberOfJoin: int
    }
    enum Role{
        Participant
        Admin
    }
}
@enduml