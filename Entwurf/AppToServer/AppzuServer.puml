@startuml
skinparam monochrome true
skinparam shadowing false
skinparam genericDisplay old
skinparam classAttributeIconSize 0
hide circle

package AppToServer {

class ServerClientAPI {
	+ GetBefehl()
}

package ServerConnection {
	' Kuemmert sich um die Connection mit unserem Server
	class RESTController <<Singleton>>{
	-ServerIP : String

	void connectToServer();
	}
}


package Authentifizierung{
' Kuemmert sich um die Google Anmeldung in Firebase
' -> Gibt User_Id und Token bei angemeldeten User aus
class Authentification {
	' Um alle Firebase Anmelde und Authentifizierung methoden aufzurufen
	-FirebaseAuth auth
	' Speichert alle Werte vom angemeldetem User. Wie Name, ID, ...
	-FirebaseUser user

	


	+int RegisterUser(String eMail, String passwort)
	+int SignInUser(String eMail, String passwort)
	+int SignOut()
	
	-int GetUserInformations()
	
	+String GetUserID() 
	' returns null, when no User connected
	+String GetToken()
}

note right of Authentification::RegisterUser
	auth.createUserWithEmailAndPassword(email, passwort)
end note
note right of Authentification::SignInUser
	auth.signInWithEmailAndPassword(email, password)
end note
note right of Authentification::SignOut
	Firebase.auth.signOut()
end note
note right of Authentification::GetUserInformations
	val user = Firebase.auth.currentUser
	'Fängt mit Firebase. an -> Ruft Firebase auf
end note

class FirebaseAPI {
	+FirebaseUser auth.currentUser();
	+void auth.signOut()

	+String getToken() 
	' auf Firebase mit GetTokenResult().getToken() aufrufen
}

}


package CommandLogic {
' Nimmt Commands entgegen, macht sie gegebenfalls Server�bertragbar
' Sendet Commands an den Server (�ber RESTAPI)
class CommandController {
	Command SendCommand()
}

'strategy
class CommandToJSON <<interface>> {
	
}

class TableCommandToJSON {

}

class TemplateCommandToJSON {

}

class PostCommandToJSON {

}

class UserCommandToJSON {

}

'strategy
class JSONToCommand <<interface>> {

}



}
}




' Aggregationen:

' ServerClientAPI ist eine _Fassade_ -> Muss als einzige Klasse vom Repository aufgerufen werden
ServerClientAPI "1" *-- "1" Authentification: contains
ServerClientAPI "1" *-- "1" RESTController: contains
ServerClientAPI "1" *-- "1" CommandController: contains

' Commands muessen an den Server gesendet werden
CommandController "1" *-left- "1" RESTController: contains

' Firebase conntection
Authentification "1" ..> "1" FirebaseAPI: uses


' CommandToJSON Strategy
CommandController "1" *-right- "n" CommandToJSON: contains

class TableCommandToJSON implements CommandToJSON

class TemplateCommandToJSON implements CommandToJSON

class PostCommandToJSON implements CommandToJSON

class UserCommandToJSON implements CommandToJSON

' JSONToCommand Strategy
CommandController "1" *-right- "n" JSONToCommand: contains


' Ideen fuer Spaeter:
'    - Benutze _Singleton_ fuer ResAPI dmit ServerClient und CommandAPI die gleiche RESTAPI besitzen
@enduml